[Model]
# Indicates if it should train the network
model.train = false
# Indicates if it should test the network
model.test = true
# Indicates if there is an already existing model that should be loaded
model.load = true
# Indicates if we want to save the model resulting from traning the net
model.save = false
# Indicates where to save the model
model.path = ../output/checkpoint/fast-rcnn-model.ckpt

[Net]
# Number of epochs to train network
number.epochs = 100
# Number of images per batch
number.images.batch = 1
# Number of rois per image in batch
number.rois.per.image.batch = 64
# Number of max foreground rois to have in the batch. The rest will be background rois
number.max.foreground.rois.per.image.batch = 16
# Number of channels in image
number.image.channels = 3
# Number of pixels in image (just one side)
number.image.pixels = 600
# Number of layers to use with resnet
number.resnet.layers = 15
# Number of hidden neurons to use for fully connected layers
number.hidden.nodes = 800
# Number of classes including background
number.classes = 21
# Number of regression fields to do object detection
number.regression.fields = 4
# Number of roi bbox fields
number.roi.bbox.fields = 4

# Initial value for learning rate
learning.rate.initial.value = 0.001
# Standard deviation threshold to reduce learning rate
learning.rate.manager.threshold = 0.6
# Number of errors values from previous training iterations to use in the calculation of the
# standard deviation for learning rate adjustment
learning.rate.manager.steps = 80
# Decay for exponential decay learning rate
learning.rate.exp.decay = 0.05

[Output]
# Path to logs output file (used to see graph with TensorBoard)
logs.path = /tmp/tensorflow_logs/rcnn-detector/
# Path to output folder where it will write the results of the testing stage
test.output.folder = ../output
# Path to output file where it will write the consecutive training iteration errors to be analyzed
# after finishing
training.error.file = ../output/error.txt
